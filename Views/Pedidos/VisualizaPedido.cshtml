@using System.Globalization
@model VidracariaDoMarcinho.Models.Orcamento

<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vidraçaria do Marcinho</title>
    <link rel="stylesheet" href="~/css/reset.css">
    <link rel="stylesheet" href="~/css/style.css">
</head>
<body>
    <!-- barra superior -->
    <div class="borda_superior">
        <a class="style-botao-a" href="@Url.Action("Index", "Home")">
            <div class="botao borda_superior_botao"><p class="texto_botao_borda_superior">Home</p></div>
        </a>
    </div>


    <div class="formulario">
        @using (@Html.BeginForm("CrudPedido", "Pedidos", FormMethod.Post, new { id = "form-crud-pedido" }))
        {

            @* Fazer isso em todos campos *@
            @Html.LabelFor(model => @model.Id, htmlAttributes: new { @class = "id-pedido texto-form" })

            <br />
            <input asp-for="Id" class="id-pedido-input input-box texto-form" readonly="readonly" />
            <br />

            @* Nome*@
            @Html.LabelFor(model => model.Cliente.Nome, htmlAttributes: new { @class = "nome-usuario texto-form" })

            <br />
            <input asp-for="Cliente.Nome" class="cliente-pedido-input input-box texto-form" readonly="readonly" />

            @* @Html.EditorFor(model => model.Cliente.Nome, new { htmlAttributes = new { @class = "nome-usuario-input input-box texto-form" } }) *@
            <br />

            @* CPF *@
            @Html.LabelFor(model => model.Cliente.CPF, htmlAttributes: new { @class = "cpf-usuario texto-form" })

            <br />
            <input asp-for="Cliente.CPF" class="cpf-cliente-input input-box texto-form" readonly="readonly" />

            <br />

            @* Telefone *@

            @Html.LabelFor(model => model.Cliente.Telefone, htmlAttributes: new { @class = "telefone-usuario texto-form" })

            <br />
            <input asp-for="Cliente.Telefone" class="cliente-pedido-input input-box texto-form" readonly="readonly" />

            <br />

            @* Status *@
            @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "status-pedido texto-form" })

            <br />
            @Html.DropDownListFor(model => model.Status, (List<SelectListItem>)ViewBag.StatusOptions, new { @class = "status-pedido-input input-box texto-form" })
            <br>

            <br />
            @* local instalação *@
            <label class="texto-form">Local de instalação</label>

            <br />
            @Html.EditorFor(model => model.LocalInstalacao, new { htmlAttributes = new { @class = "instalacao-input input-box texto-form" } })
            <br />

            @* obs *@
            @Html.LabelFor(model => model.Observacoes, htmlAttributes: new { @class = "obs texto-form" })

            <br />
            @Html.EditorFor(model => model.Observacoes, new { htmlAttributes = new { @class = "obs-input input-box texto-form" } })
            <br />

            @* total *@
            @Html.LabelFor(model => model.Total, htmlAttributes: new { @class = "total texto-form" })

            <br />
            @Html.TextBoxFor(model => model.Total, new {
                id = "total-input",
                @class = "total-input input-box texto-form",
                type = "number",
                step = "0.01",
                min = "0",
                value = Model.Total.ToString(CultureInfo.InvariantCulture),
                onchange = "calculaValorParcela()"
            })            
            <br />

            @* parcelas *@
            @Html.LabelFor(model => model.Parcelas, htmlAttributes: new { @class = "parcelas texto-form" })

            <br />
            <input asp-for="Parcelas" id="parcelas-input" class="cliente-pedido-input input-box texto-form" readonly="readonly" />

            <br />

            @* parcelas pagas *@
            <label class="texto-form">Parcelas pagas</label>
            
            <br />
            @Html.EditorFor(model => model.ParcelasPagas, new {
                htmlAttributes = new {
                    id = "parcelas-pagas-input",
                    @class = "parcelas-pagas-input input-box texto-form",
                    type = "number",
                    min = "0",
                    onchange = "calculaValorParcela()",
                    onblur = "calculaValorParcela()"
                }
            })
            <br />

            @* Gasolina *@
            @Html.LabelFor(model => model.Gasolina, htmlAttributes: new { @class = "gasolina-pagas texto-form" })

            <br />
            @Html.EditorFor(model => model.Gasolina, new { htmlAttributes = new { @class = "gasolina-input input-box texto-form", onchange = "reduzTotal()" } })
            <br />

            @* Silicone *@
            @Html.LabelFor(model => model.Silicone, htmlAttributes: new { @class = "silicone-pagas texto-form" })

            <br />
            @Html.EditorFor(model => model.Silicone, new { htmlAttributes = new { @class = "silicone-pagas-input input-box texto-form", onchange = "reduzTotal()" } })
            <br />

            @* Box *@
            @Html.LabelFor(model => model.Box, htmlAttributes: new { @class = "box-pagas texto-form" })

            <br />
            @Html.EditorFor(model => model.Box, new { htmlAttributes = new { @class = "box-pagas-input input-box texto-form", onchange = "reduzTotal()" } })
            <br />

            @* Valor Parcelas *@
            <label class="texto-form">Valor Parcelas</label>
            <br />
            @Html.EditorFor(model => model.ValorParcelas, new { htmlAttributes = new {@id= "valor-parcelas-input", @class = "valor-parcelas-input input-box texto-form" } })
            <br />

            <div class="form-group" style="display: flex; gap: 10px; align-items: center;">
                <!-- Campo Valor Pago -->
                <div>
                    <label class="texto-form">Valor Pago</label>
                    <br />
                    @Html.TextBoxFor(model => model.ValorPago, new {
                        @id = "valor-pago-input",
                        @class = "valor-pago-input input-box texto-form",
                        type = "number", step = "0.01", min = "0",
                        value = Model.ValorPago.ToString(CultureInfo.InvariantCulture),
                        onchange = "calculaValorParcela()" 
                    })
                </div>

                <!-- Campo Adicionar Valor -->
                <div>
                    <label for="adicionar-valor" class="texto-form">Adicionar Valor</label>
                    <br />
                    <input type="number" id="adicionar-valor" 
                           class="input-box texto-form" 
                           step="0.01" min="0" value="0" />
                </div>

                <!-- Botão Somar -->
                <div>
                    <button type="button" class="btn btn-success" onclick="somarValor()">Adicionar</button>
                </div>
            </div>

            <table id="tabelaItens" class="table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Material</th>
                        <th>Quantidade</th>
                        <th>Preço Unitário</th>
                        <th>Altura</th>
                        <th>Largura</th>
                        <th>Cor</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.Vidros)
                    {
                        <tr>
                            <td>@item.MaterialId</td>
                            <td>@item.TipoVidro</td>
                            <td>@item.Quantidade</td>
                            <td>@item.Preco.ToString("C")</td>
                            <td>@item.Altura</td>
                            <td>@item.Largura</td>
                            <td>@item.Cor</td>
                            <td>
                            <a class="hyperlink_tabela" href="@Url.Action("DeleteVidro", "Pedidos", new { id = item.Id })">
                                    <div class="botao_tabela">Remover</div>
                                </a>
                            </td>
                        </tr>
                    }
                    @foreach (var item in Model.Itens)
                    {
                        <tr>
                            <td>@item.MaterialId</td>
                            <td>@item.Material?.Nome</td>
                            <td>@item.Quantidade</td>
                            <td>@item.PrecoUnitario.ToString("C")</td>
                            <td></td>
                            <td></td>
                            <td>@item.Material?.Cor</td>
                            <td>
                                <a class="hyperlink_tabela" href="@Url.Action("DeleteItem", "Pedidos", new { id = item.Id })">
                                    <div class="botao_tabela">Remover</div>
                                </a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>







            <br />
            <button type="submit" class="btn btn-primary rounded-pill px-4">Salvar</button>

            @* <div class="text-center campo-de-texto">
                <a href="@Url.Action("Index", "Clientes")" class="btn btn-secondary rounded-pill px-4">Voltar</a>
                <a href="@Url.Action("EditarCliente", "Clientes", new { cpf = @Model.CPF })" class="btn btn-warning rounded-pill px-4">Editar</a>
            </div> *@
        }



        <script>window.onload = function () {
            reduzTotal();
            atualizarCampos();
            calculaValorParcela();
        };
        </script>
    </div>

</body>
</html>
